#---------------------------------------------------------------------------------------------------------------------------------
# jackmon generic config
# key=value can have leading whitespace and either side of '='
# string values should not be quoted, or the value will contain the quote characters.
# port values are regular expressions- so you can use wildcard match for multiple channels from a source/sink
# comments- like this one have leading #
#---------------------------------------------------------------------------------------------------------------------------------

#---------------------------------------------------------------------------------------------------------------------------------
# name: of this jack client instance- recommended
# 	If a client already exists with this name, it will be renamed automatically (indexed)
#---------------------------------------------------------------------------------------------------------------------------------
# name = jackmon

#---------------------------------------------------------------------------------------------------------------------------------
# server: optional name of jack server where multiple servers are running
#---------------------------------------------------------------------------------------------------------------------------------
# server =

#---------------------------------------------------------------------------------------------------------------------------------
# noreconnect: set to 1, to exit if any source port disappears- eg if its dynamic.
#	Normally (noreconnect=0 or unset) if a source port is disconnected, the service will reconnect it automatically.
#	Where the source port is removed (eg a USB device reset) the system waits for it to reappear
#	before reconnecting it.
#	When noreconnect=1, this service exits if a source is disconnected from our sink
#---------------------------------------------------------------------------------------------------------------------------------
# noreconnect =

#---------------------------------------------------------------------------------------------------------------------------------
# debug to stderr, set debug=1
#---------------------------------------------------------------------------------------------------------------------------------
# debug =

#---------------------------------------------------------------------------------------------------------------------------------
# sources: override this to change the jack sources to monitor, if unspecified, default is
#---------------------------------------------------------------------------------------------------------------------------------
# sources = Built-in Audio.*:capture_*

#---------------------------------------------------------------------------------------------------------------------------------
# VU meter-
# vu_pipe:
#	set this to direct vu to a file or already created pipe
# vu_ms:
#	update rate- default 50ms when vu_pipe is set, otherwise needs to be set to enable vu on stdout
# vu_peak_hold_ms:
#   hold the peak value for this period unless it increases... in the background decay "next" at a rate of -65dB per period
#	replace "next" if any incoming sample is greater than the decaying "next" but less than the currently displayed peak
# vu_pretty:
#   flag to print a simple multiline character based VU meter to the output
#---------------------------------------------------------------------------------------------------------------------------------
# vu_pipe =
# vu_ms =
# vu_peak_hold_ms = 800
# vu_pretty =

#---------------------------------------------------------------------------------------------------------------------------------
# CLIP indication- can be a LED via GPIO, and/or script, for example
# clip_ms:
#	Set this to control duration
#	Setting clip_gpio will set clip_ms=200 if not overridden here
# clip_gpio:
#	GPIO number of an LED/relay etc connected to host.
#	Negative for active low.
#	clip_ms has default 200 if clip_gpio is defined.
#	Example:
#	clip_gpio=531
# clip_cmd:
#	Run a command. If clip_ms is set, environment variable CLIP=1 for set, CLIP=0 for release after timeout. Example:
#	clip_cmd=echo clipped $'{CLIP}'
# clip_samples:
#	number of consecutive saturated samples to flag clip event- we want to be able to use max,
#		but not if its flatlining -> clipping.
#---------------------------------------------------------------------------------------------------------------------------------
# clip_ms =
# clip_gpio =
# clip_cmd =
# clip_samples = 4

#---------------------------------------------------------------------------------------------------------------------------------
# LEVEL detector
# 	when RMS level exceeds threshold, the level is triggered. This can drive a LED, run a script, and/or connect registered jack
# 	sinks to jack sources. The script is run with environment variable TRIG=1
# 	If the RMS level is below threshold for more than level_sec seconds, the state is reversed- sinks disconnected,
# 	GPIO turned off and/or command run with TRIG=0
# Example settings- any one of these being configured will enable the level detector
#	level_cmd=echo triggered $'{TRIG}'
#	level_gpio=534
#	level_sinks=Built-in.*:playback*
#---------------------------------------------------------------------------------------------------------------------------------
# level_cmd =
# level_gpio = 
# level_sinks =
# level_thres = -65.0
# level_sec = 60
